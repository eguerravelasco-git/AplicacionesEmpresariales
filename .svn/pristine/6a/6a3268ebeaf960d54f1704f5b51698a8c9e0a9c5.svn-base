/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package control.logica.beans;

import control.logica.clases.CAsignacionJornada;
import control.logica.clases.CAusenciaTemporal;
import control.logica.clases.CDetalleAusenciasTemporales;
import control.logica.clases.CTipoAusencia;
import control.logica.clases.consultas.CAusenciasTemporalesConsulta;
import control.logica.clases.consultas.CHorarioEmpleado;
import control.logica.funciones.CFAusenciasTemporales;
import control.logica.funciones.CFDetalleAusenciasTemporales;
import control.logica.funciones.consultas.CFAusenciasTemporalesConsulta;
import control.logica.funciones.consultas.CFHorarioEmpleadoConsulta;
import informacion.logica.clases.CRelacionDependencia;
import informacion.logica.funciones.CFRelacionDependencia;
import java.io.Serializable;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import master.logica.funciones.FPersona;
import master.presentacion.funciones.beans.consultas.GestionPersonaConsultasC;
import org.primefaces.context.DefaultRequestContext;
import org.primefaces.event.ScheduleEntryMoveEvent;
import org.primefaces.event.ScheduleEntryResizeEvent;
import org.primefaces.event.SelectEvent;
import org.primefaces.model.DefaultScheduleEvent;
import org.primefaces.model.DefaultScheduleModel;
import org.primefaces.model.ScheduleEvent;
import org.primefaces.model.ScheduleModel;
import recursos.Tools;
import recursos.Util;

/**
 *
 * @author DiegoPalacios
 */
@ManagedBean
@ViewScoped
public class AusenciasTemporalesC implements Serializable {

    //   <editor-fold defaultstate="collapsed" desc="Atributos">
    private CAusenciaTemporal objAusenciaTemporal;
    private ArrayList<CAusenciasTemporalesConsulta> lstAusenciasTemporalesConsulta;

    @ManagedProperty(value = "#{gestionPersonaConsultasC}")
    private GestionPersonaConsultasC dm;
    private CTipoAusencia tipoAusenciaSel;
    private CAusenciasTemporalesConsulta objAusenciaTemporalActualC;
    private CAusenciaTemporal objAusenciaTemporalActual;
    private int codigoTipoAusenciaSeleccionado;
    private ArrayList<CHorarioEmpleado> lstHorariosSel;
    //////////////////////
    private ScheduleModel eventModel;
    private ScheduleEvent event = new DefaultScheduleEvent();
    private ArrayList<CHorarioEmpleado> lstHorarioEmpleado;
    private CDetalleAusenciasTemporales detalleAusencias;
    private CDetalleAusenciasTemporales detalleAusenciasActual;
    private ArrayList<CDetalleAusenciasTemporales> lstDetalleAusencias;
    // private ArrayList<CDetalleAusenciasTemporales> lstDetalleAusenciasActual;
    private CHorarioEmpleado horarioEmpleadoSel;
    private java.util.Date horaSalida;
    private java.util.Date numeroHoras;

    //</editor-fold>
    //   <editor-fold defaultstate="collapsed" desc="Constructores">
    public AusenciasTemporalesC() {
        this.lstAusenciasTemporalesConsulta = new ArrayList<CAusenciasTemporalesConsulta>();
        this.objAusenciaTemporal = new CAusenciaTemporal();
        this.detalleAusenciasActual = new CDetalleAusenciasTemporales();
        this.tipoAusenciaSel = new CTipoAusencia();
        this.objAusenciaTemporalActualC = new CAusenciasTemporalesConsulta();
        this.objAusenciaTemporalActual = new CAusenciaTemporal();
        this.codigoTipoAusenciaSeleccionado = 0;
        this.lstHorariosSel = new ArrayList<CHorarioEmpleado>();
        //////////////////
        this.eventModel = new DefaultScheduleModel();
        this.lstHorarioEmpleado = new ArrayList<CHorarioEmpleado>();
        this.detalleAusencias = new CDetalleAusenciasTemporales();
        this.lstDetalleAusencias = new ArrayList<CDetalleAusenciasTemporales>();
//        this.lstDetalleAusenciasActual = new ArrayList<CDetalleAusenciasTemporales>();
        this.horarioEmpleadoSel = new CHorarioEmpleado();
//        this.horaSalida = new Date();
//        this.numeroHoras = new Date();
//        cargaRelacionAusenciasTemporales();
//        cargarHorarioEmpleado();
    }

    @PostConstruct
    public void PostConstructorAusencias() {
        cargaRelacionAusenciasTemporales();
        cargarHorarioEmpleado();

    }

    //</editor-fold>
    //   <editor-fold defaultstate="collapsed" desc="Metodos set y get">
//    public ArrayList<CDetalleAusenciasTemporales> getLstDetalleAusenciasActual() {
//        return lstDetalleAusenciasActual;
//    }
//
//    public void setLstDetalleAusenciasActual(ArrayList<CDetalleAusenciasTemporales> lstDetalleAusenciasActual) {
//        this.lstDetalleAusenciasActual = lstDetalleAusenciasActual;
//    }
    public Date getHoraSalida() {
        return horaSalida;
    }

    public void setHoraSalida(Date horaSalida) {
        this.horaSalida = horaSalida;
    }

    public Date getNumeroHoras() {
        return numeroHoras;
    }

    public void setNumeroHoras(Date numeroHoras) {
        this.numeroHoras = numeroHoras;
    }

    public CHorarioEmpleado getHorarioEmpleadoSel() {
        return horarioEmpleadoSel;
    }

    public void setHorarioEmpleadoSel(CHorarioEmpleado horarioEmpleadoSel) {
        this.horarioEmpleadoSel = horarioEmpleadoSel;
    }

    public CDetalleAusenciasTemporales getDetalleAusencias() {
        return detalleAusencias;
    }

    public void setDetalleAusencias(CDetalleAusenciasTemporales detalleAusencias) {
        this.detalleAusencias = detalleAusencias;
    }

    public ArrayList<CDetalleAusenciasTemporales> getLstDetalleAusencias() {
        return lstDetalleAusencias;
    }

    public void setLstDetalleAusencias(ArrayList<CDetalleAusenciasTemporales> lstDetalleAusencias) {
        this.lstDetalleAusencias = lstDetalleAusencias;
    }

    public ArrayList<CHorarioEmpleado> getLstHorarioEmpleado() {
        return lstHorarioEmpleado;
    }

    public void setLstHorarioEmpleado(ArrayList<CHorarioEmpleado> lstHorarioEmpleado) {
        this.lstHorarioEmpleado = lstHorarioEmpleado;
    }

    public Date getRandomDate(Date base) {
        Calendar date = Calendar.getInstance();
        date.setTime(base);
        date.add(Calendar.DATE, ((int) (Math.random() * 30)) + 1);    //set random day of month  

        return date.getTime();
    }

    public Date getInitialDate() {
        Calendar calendar = Calendar.getInstance();
        calendar.set(calendar.get(Calendar.YEAR), Calendar.FEBRUARY, calendar.get(Calendar.DATE), 0, 0, 0);

        return calendar.getTime();
    }

    public ScheduleModel getEventModel() {
        return eventModel;
    }

    public ScheduleEvent getEvent() {
        return event;
    }

    public void setEvent(ScheduleEvent event) {
        this.event = event;
    }

    public ArrayList<CHorarioEmpleado> getLstHorariosSel() {
        return lstHorariosSel;
    }

    public void setLstHorariosSel(ArrayList<CHorarioEmpleado> lstHorariosSel) {
        this.lstHorariosSel = lstHorariosSel;
    }

    public int getCodigoTipoAusenciaSeleccionado() {
        return codigoTipoAusenciaSeleccionado;
    }

    public void setCodigoTipoAusenciaSeleccionado(int codigoTipoAusenciaSeleccionado) {
        this.codigoTipoAusenciaSeleccionado = codigoTipoAusenciaSeleccionado;
    }

    public CAusenciasTemporalesConsulta getObjAusenciaTemporalActualC() {
        return objAusenciaTemporalActualC;
    }

    public void setObjAusenciaTemporalActualC(CAusenciasTemporalesConsulta objAusenciaTemporalActualC) {
        this.objAusenciaTemporalActualC = objAusenciaTemporalActualC;
    }

    public CAusenciaTemporal getObjAusenciaTemporalActual() {
        return objAusenciaTemporalActual;
    }

    public void setObjAusenciaTemporalActual(CAusenciaTemporal objAusenciaTemporalActual) {
        this.objAusenciaTemporalActual = objAusenciaTemporalActual;
    }

    public CTipoAusencia getTipoAusenciaSel() {
        return tipoAusenciaSel;
    }

    public void setTipoAusenciaSel(CTipoAusencia tipoAusenciaSel) {
        this.tipoAusenciaSel = tipoAusenciaSel;
    }

    public GestionPersonaConsultasC getDm() {
        return dm;
    }

    public void setDm(GestionPersonaConsultasC dm) {
        this.dm = dm;
    }

    public CAusenciaTemporal getObjAusenciaTemporal() {
        return objAusenciaTemporal;
    }

    public void setObjAusenciaTemporal(CAusenciaTemporal objAusenciaTemporal) {
        this.objAusenciaTemporal = objAusenciaTemporal;
    }

    public ArrayList<CAusenciasTemporalesConsulta> getLstAusenciasTemporalesConsulta() {
        return lstAusenciasTemporalesConsulta;
    }

    public void setLstAusenciasTemporalesConsulta(ArrayList<CAusenciasTemporalesConsulta> lstAusenciasTemporalesConsulta) {
        this.lstAusenciasTemporalesConsulta = lstAusenciasTemporalesConsulta;
    }

    //</editor-fold>
    //   <editor-fold defaultstate="collapsed" desc="Funciones">
    public CDetalleAusenciasTemporales getDetalleAusenciasActual() {
        return detalleAusenciasActual;
    }

    public void setDetalleAusenciasActual(CDetalleAusenciasTemporales detalleAusenciasActual) {
        this.detalleAusenciasActual = detalleAusenciasActual;
    }

    public void cargaRelacionAusenciasTemporales() {
        try {
            lstAusenciasTemporalesConsulta = CFAusenciasTemporalesConsulta.obtenerAusenciasTemporalesEmpleados(1, "", null, null, 1);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    public void preparaNuevo() {
        this.objAusenciaTemporal = new CAusenciaTemporal();
        // this.dm= new GestionPersonaConsultasC();
        this.tipoAusenciaSel.setIntCodigo(0);
        dm.setObjPersona(null);

    }

    public void preparaBusqueda() {
        dm.setPersonaSel(null);
        dm.setDatoBusqueda(null);
        dm.setLazyModel(null);
        dm.setLstPersonas(null);
    }

    public void insertarAusenciaTemporal() {
        try {
            objAusenciaTemporal.setIntEstado(1);
            CRelacionDependencia relacionDependencia = CFRelacionDependencia.obtenerRelacionDependenciaDadoCodigoPersona(dm.getObjPersona().getLgCodigoPersona());
            objAusenciaTemporal.setObjCodigoRelacionDependencia(relacionDependencia);
            this.objAusenciaTemporal.setTmstmFechaSolicitud(Tools.obtieneFechaActualSegundos());
            this.objAusenciaTemporal.setObjCodigoTipoAusencia(tipoAusenciaSel);
            if (lstDetalleAusencias.size() > 0) {
                if (dm.getObjPersona().getLgCodigoPersona() > 0) {
                    long numAusenciaTemporal = CFAusenciasTemporales.insertar(objAusenciaTemporal, lstDetalleAusencias);
                    if (numAusenciaTemporal > 0) {
                        cargaRelacionAusenciasTemporales();
                        DefaultRequestContext.getCurrentInstance().execute("wdgNuevo.hide()");
                        Util.addSuccessMessage("Datos Insertados");
                    } else {
                    }
                } else {
                    Util.addSuccessMessage("Una Asucencia Laboral necesita un empleado");
                }

            } else {
                Util.addSuccessMessage("Una Asucencia Laboral necesita al menos un día asignado");
            }

        } catch (Exception e) {
            Util.addErrorMessage("Una Asucencia Laboral necesita un empleado");
            System.out.println(e.getMessage());

        }

    }

    public void eliminarDetalleAusencia() {
        try {
            if (lstDetalleAusencias.size() > 1) {
                boolean bandera = CFDetalleAusenciasTemporales.eliminar(detalleAusenciasActual.getLgCodigo());
                if (bandera) {
                    Util.addSuccessMessage("Registro Eliminado Definitivamente");
                    lstDetalleAusencias = CFDetalleAusenciasTemporales.obtenerDetalleAusenciasTemporalesDadoCodigoAusencia(objAusenciaTemporalActual.getLgCodigo());
                } else {
                    Util.addSuccessMessage("No se eliminó el Registro");
                }

            } else {
                Util.addSuccessMessage("En una Ausencia Temporal debe existir al menos una fecha de permiso.");
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            Util.addSuccessMessage("No se eliminó el Registro" + e.getMessage());
        }
    }

    public void insertarDetalleAusencia() {
        try {
            detalleAusencias = new CDetalleAusenciasTemporales();
            detalleAusencias.setDtFecha_salida(horarioEmpleadoSel.getDtFecha());
            CAsignacionJornada asignacionJoranada = new CAsignacionJornada();
            asignacionJoranada.setLgCodigo(horarioEmpleadoSel.getLgCodigo());
            detalleAusencias.setObjCodigoAsignacionJornada(asignacionJoranada);
            detalleAusencias.setObjCodigoAusenciaTemporal(objAusenciaTemporalActual);
            detalleAusencias.setTmHoraSalida(new java.sql.Time(horaSalida.getTime()));
            detalleAusencias.setTmNumeroHoras(new java.sql.Time(numeroHoras.getTime()));
            System.out.println(detalleAusencias.getTmHoraSalida());
            long numero = CFDetalleAusenciasTemporales.insertar(detalleAusencias);

            if (numero > 0) {
                Util.addSuccessMessage("Dìa de Persmiso Insertado");
                DefaultRequestContext.getCurrentInstance().execute("PF('myscheduleEditar').update();PF('eventDialogEditar').hide();PF('wdgHorarioEditar').hide()");
                lstDetalleAusencias = CFDetalleAusenciasTemporales.obtenerDetalleAusenciasTemporalesDadoCodigoAusencia(objAusenciaTemporalActual.getLgCodigo());
            } else {
                Util.addSuccessMessage("No se insertó el día de permiso");
            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
            Util.addSuccessMessage("No se insertó el día de permiso" + e.getMessage());
        }
    }

    public void preparaEditar() {
        try {
            objAusenciaTemporalActual = CFAusenciasTemporales.obtenerAusenciaTemporalDadoCodigo(objAusenciaTemporalActualC.getLgCodigoAusenciaTemp());
            lstDetalleAusencias = CFDetalleAusenciasTemporales.obtenerDetalleAusenciasTemporalesDadoCodigoAusencia(objAusenciaTemporalActualC.getLgCodigoAusenciaTemp());
            this.tipoAusenciaSel = this.objAusenciaTemporalActual.getObjCodigoTipoAusencia();
            dm.setObjPersona(objAusenciaTemporalActual.getObjCodigoRelacionDependencia().getObjCodigoPersona());
            codigoTipoAusenciaSeleccionado = objAusenciaTemporalActual.getObjCodigoTipoAusencia().getIntCodigo();

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

    }

    public void editarAusenciaTemporal() {
//        try {
//            CRelacionDependencia relacionDependencia = CFRelacionDependencia.obtenerRelacionDependenciaDadoCodigoPersona(dm.getObjPersona().getLgCodigoPersona());
//            objAusenciaTemporalActual.setObjCodigoRelacionDependencia(relacionDependencia);
//            this.objAusenciaTemporalActual.setTmstmFechaSalida(new Timestamp(this.fechaSalida.getTime()));
//            this.objAusenciaTemporalActual.setTmstmFechaReintegro(new Timestamp(this.fechaEntrada.getTime()));
//            //this.objAusenciaTemporal.setTmstmFechaSolicitud(Tools.obtieneFechaActualSegundos());
//            tipoAusenciaSel.setIntCodigo(codigoTipoAusenciaSeleccionado);
//            this.objAusenciaTemporalActual.setObjCodigoTipoAusencia(tipoAusenciaSel);
//            boolean bandera = CFAusenciasTemporales.actualizar(objAusenciaTemporalActual);
//            if (bandera == true) {
//                cargaRelacionAusenciasTemporales();
//                fechaEntrada = null;
//                fechaSalida = null;
//                DefaultRequestContext.getCurrentInstance().execute("wdgEditar.hide()");
//                Util.addSuccessMessage("Datos Actualizadoss");
//            } else {
//            }
//        } catch (Exception e) {
//            Util.addErrorMessage(e.getMessage());
//        }

    }

    public void cargaHorarioEmpleado() {
        try {
            lstHorarioEmpleado = CFHorarioEmpleadoConsulta.obtenerHorarioActivoEmpleado(dm.getObjPersona().getStrIdentificacion());
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    public void asignarSelectedPersona() {
        try {
            dm.setObjPersona(FPersona.ObtenerPersonaDadoCodigo(dm.getPersonaSel().getLgCodigo()));
            //  cargaHorarioEmpleado();
            //dm.ge = (FPersona.ObtenerPersonaDadoCodigo(dm.getPersonaSel().getLgCodigo()));
//            objPersona.setLgCodigoPersona(1);
//            objPersona.setStrApellidos("PALACIOS CAMPANA");
//            objPersona.setStrNombres("DIEGO BERNARDO");
//            objPersona.setStrIdentificacion("0603094517");
            // System.out.print(objPersona.getStrIdentificacion());
        } catch (java.lang.Exception e) {
            System.out.print(e.getMessage());
            //  System.out.print(getPersona().getApellido() + " " + e.getMessage());
        }
        DefaultRequestContext.getCurrentInstance().execute("PF('wdialogoBusquedaPersonas').hide()");
        // DefaultRequestContext.getCurrentInstance().execute("wdgNuevo.show()");
    }

    public void cargarHorarioEmpleado() {
        try {
            lstHorarioEmpleado = CFHorarioEmpleadoConsulta.obtenerHorarioActivoEmpleado("06");
            for (CHorarioEmpleado cHorarioEmpleado : lstHorarioEmpleado) {
                eventModel.addEvent(new DefaultScheduleEvent(cHorarioEmpleado.getStrNombreCorto(), cHorarioEmpleado.getDtFecha(), cHorarioEmpleado.getDtFecha(),
                        cHorarioEmpleado));
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private Calendar today() {
        Calendar calendar = Calendar.getInstance();
        calendar.set(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DATE), 0, 0, 0);

        return calendar;
    }

    private Date previousDay8Pm() {
        Calendar t = (Calendar) today().clone();
        t.set(Calendar.AM_PM, Calendar.PM);
        t.set(Calendar.DATE, t.get(Calendar.DATE) - 1);
        t.set(Calendar.HOUR, 8);

        return t.getTime();
    }

    private Date previousDay11Pm() {
        Calendar t = (Calendar) today().clone();
        t.set(Calendar.AM_PM, Calendar.PM);
        t.set(Calendar.DATE, t.get(Calendar.DATE) - 1);
        t.set(Calendar.HOUR, 11);

        return t.getTime();
    }

    private Date today1Pm() {
        Calendar t = (Calendar) today().clone();
        t.set(Calendar.AM_PM, Calendar.PM);
        t.set(Calendar.HOUR, 1);

        return t.getTime();
    }

    private Date theDayAfter3Pm() {
        Calendar t = (Calendar) today().clone();
        t.set(Calendar.DATE, t.get(Calendar.DATE) + 2);
        t.set(Calendar.AM_PM, Calendar.PM);
        t.set(Calendar.HOUR, 3);

        return t.getTime();
    }

    private Date today6Pm() {
        Calendar t = (Calendar) today().clone();
        t.set(Calendar.AM_PM, Calendar.PM);
        t.set(Calendar.HOUR, 6);

        return t.getTime();
    }

    private Date nextDay9Am() {
        Calendar t = (Calendar) today().clone();
        t.set(Calendar.AM_PM, Calendar.AM);
        t.set(Calendar.DATE, t.get(Calendar.DATE) + 1);
        t.set(Calendar.HOUR, 9);

        return t.getTime();
    }

    private Date nextDay11Am() {
        Calendar t = (Calendar) today().clone();
        t.set(Calendar.AM_PM, Calendar.AM);
        t.set(Calendar.DATE, t.get(Calendar.DATE) + 1);
        t.set(Calendar.HOUR, 11);

        return t.getTime();
    }

    private Date fourDaysLater3pm() {
        Calendar t = (Calendar) today().clone();
        t.set(Calendar.AM_PM, Calendar.PM);
        t.set(Calendar.DATE, t.get(Calendar.DATE) + 4);
        t.set(Calendar.HOUR, 3);

        return t.getTime();
    }

    public void addEvent(ActionEvent actionEvent) {
        if (event.getId() == null) {
            eventModel.addEvent(event);
        } else {
            eventModel.updateEvent(event);
        }

        event = new DefaultScheduleEvent();
    }

    public void asignarDetalleAusencia() {

        detalleAusencias = new CDetalleAusenciasTemporales();
        detalleAusencias.setDtFecha_salida(horarioEmpleadoSel.getDtFecha());
        CAsignacionJornada asignacionJoranada = new CAsignacionJornada();
        asignacionJoranada.setLgCodigo(horarioEmpleadoSel.getLgCodigo());
        detalleAusencias.setObjCodigoAsignacionJornada(asignacionJoranada);
        detalleAusencias.setObjCodigoAusenciaTemporal(null);
        detalleAusencias.setTmHoraSalida(new java.sql.Time(horaSalida.getTime()));
        detalleAusencias.setTmNumeroHoras(new java.sql.Time(numeroHoras.getTime()));
        System.out.println(detalleAusencias.getTmHoraSalida());
        DefaultRequestContext.getCurrentInstance().execute("PF('myschedule').update();PF('eventDialog').hide();PF('wdgHorario').hide()");

    }

    public void onEventSelect(SelectEvent selectEvent) {
        event = (ScheduleEvent) selectEvent.getObject();
        horarioEmpleadoSel = (CHorarioEmpleado) event.getData();
        System.out.print((horarioEmpleadoSel.getLgCodigo()));
    }

    public void onDateSelect(SelectEvent selectEvent) {
        event = new DefaultScheduleEvent("", (Date) selectEvent.getObject(), (Date) selectEvent.getObject());

    }

    public void onEventMove(ScheduleEntryMoveEvent event) {
        FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO, "Event moved", "Day delta:" + event.getDayDelta() + ", Minute delta:" + event.getMinuteDelta());

        addMessage(message);
    }

    public void onEventResize(ScheduleEntryResizeEvent event) {
        FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO, "Event resized", "Day delta:" + event.getDayDelta() + ", Minute delta:" + event.getMinuteDelta());

        addMessage(message);
    }

    private void addMessage(FacesMessage message) {
        FacesContext.getCurrentInstance().addMessage(null, message);
    }
    //</editor-fold>
}
